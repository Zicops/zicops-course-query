// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CatMain struct {
	ID          *string `json:"id"`
	Name        *string `json:"Name"`
	Description *string `json:"Description"`
	ImageURL    *string `json:"ImageUrl"`
	Code        *string `json:"Code"`
	CreatedAt   *string `json:"CreatedAt"`
	UpdatedAt   *string `json:"UpdatedAt"`
	CreatedBy   *string `json:"CreatedBy"`
	UpdatedBy   *string `json:"UpdatedBy"`
	IsActive    *bool   `json:"IsActive"`
}

type Chapter struct {
	ID          *string `json:"id"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
	ModuleID    *string `json:"moduleId"`
	CourseID    *string `json:"courseId"`
	CreatedAt   *string `json:"created_at"`
	UpdatedAt   *string `json:"updated_at"`
	Sequence    *int    `json:"sequence"`
}

type Course struct {
	ID                 *string          `json:"id"`
	Name               *string          `json:"name"`
	LspID              *string          `json:"lspId"`
	Publisher          *string          `json:"publisher"`
	Description        *string          `json:"description"`
	Summary            *string          `json:"summary"`
	Instructor         *string          `json:"instructor"`
	Image              *string          `json:"image"`
	PreviewVideo       *string          `json:"previewVideo"`
	TileImage          *string          `json:"tileImage"`
	Owner              *string          `json:"owner"`
	Duration           *int             `json:"duration"`
	ExpertiseLevel     *string          `json:"expertise_level"`
	Language           []*string        `json:"language"`
	Benefits           []*string        `json:"benefits"`
	Outcomes           []*string        `json:"outcomes"`
	CreatedAt          *string          `json:"created_at"`
	UpdatedAt          *string          `json:"updated_at"`
	Type               *string          `json:"type"`
	Prequisites        []*string        `json:"prequisites"`
	GoodFor            []*string        `json:"goodFor"`
	MustFor            []*string        `json:"mustFor"`
	RelatedSkills      []*string        `json:"related_skills"`
	PublishDate        *string          `json:"publish_date"`
	ExpiryDate         *string          `json:"expiry_date"`
	ExpectedCompletion *string          `json:"expected_completion"`
	QaRequired         *bool            `json:"qa_required"`
	Approvers          []*string        `json:"approvers"`
	CreatedBy          *string          `json:"created_by"`
	UpdatedBy          *string          `json:"updated_by"`
	Status             *Status          `json:"status"`
	IsDisplay          *bool            `json:"is_display"`
	Category           *string          `json:"category"`
	SubCategory        *string          `json:"sub_category"`
	SubCategories      []*SubCategories `json:"sub_categories"`
	IsActive           *bool            `json:"is_active"`
}

type CourseCohort struct {
	ID                 *string `json:"id"`
	CourseID           *string `json:"CourseId"`
	CohortID           *string `json:"CohortId"`
	CourseType         *string `json:"CourseType"`
	LspID              *string `json:"LspId"`
	CohortCode         *string `json:"CohortCode"`
	IsMandatory        *bool   `json:"isMandatory"`
	CourseStatus       *string `json:"CourseStatus"`
	AddedBy            *string `json:"AddedBy"`
	CreatedAt          *string `json:"CreatedAt"`
	UpdatedAt          *string `json:"UpdatedAt"`
	CreatedBy          *string `json:"CreatedBy"`
	UpdatedBy          *string `json:"UpdatedBy"`
	IsActive           *bool   `json:"IsActive"`
	ExpectedCompletion *int    `json:"ExpectedCompletion"`
}

type CoursesFilters struct {
	LspID       *string `json:"LspId"`
	Category    *string `json:"Category"`
	SubCategory *string `json:"SubCategory"`
	Language    *string `json:"Language"`
	DurationMin *int    `json:"DurationMin"`
	DurationMax *int    `json:"DurationMax"`
	Type        *string `json:"Type"`
	SearchText  *string `json:"SearchText"`
}

type Discussion struct {
	DiscussionID   *string   `json:"DiscussionId"`
	CourseID       *string   `json:"CourseId"`
	ReplyID        *string   `json:"ReplyId"`
	UserID         *string   `json:"UserId"`
	Time           *int      `json:"Time"`
	Content        *string   `json:"Content"`
	Module         *string   `json:"Module"`
	Chapter        *string   `json:"Chapter"`
	Topic          *string   `json:"Topic"`
	Likes          []*string `json:"Likes"`
	Dislike        []*string `json:"Dislike"`
	IsAnonymous    *bool     `json:"IsAnonymous"`
	IsPinned       *bool     `json:"IsPinned"`
	IsAnnouncement *bool     `json:"IsAnnouncement"`
	ReplyCount     *int      `json:"ReplyCount"`
	CreatedBy      *string   `json:"CreatedBy"`
	CreatedAt      *int      `json:"Created_at"`
	UpdatedBy      *string   `json:"Updated_by"`
	UpdatedAt      *int      `json:"Updated_at"`
	Status         *string   `json:"Status"`
}

type Exam struct {
	ID           *string   `json:"id"`
	Name         *string   `json:"Name"`
	Description  *string   `json:"Description"`
	Code         *string   `json:"Code"`
	QpID         *string   `json:"QpId"`
	QuestionIds  []*string `json:"QuestionIds"`
	CreatedAt    *string   `json:"CreatedAt"`
	UpdatedAt    *string   `json:"UpdatedAt"`
	CreatedBy    *string   `json:"CreatedBy"`
	UpdatedBy    *string   `json:"UpdatedBy"`
	IsActive     *bool     `json:"IsActive"`
	Type         *string   `json:"Type"`
	ScheduleType *string   `json:"ScheduleType"`
	Duration     *int      `json:"Duration"`
	Status       *string   `json:"Status"`
	Category     *string   `json:"Category"`
	SubCategory  *string   `json:"SubCategory"`
	TotalCount   *int      `json:"TotalCount"`
}

type ExamCohort struct {
	ID        *string `json:"id"`
	ExamID    *string `json:"ExamId"`
	CohortID  *string `json:"CohortId"`
	CreatedAt *string `json:"CreatedAt"`
	UpdatedAt *string `json:"UpdatedAt"`
	CreatedBy *string `json:"CreatedBy"`
	UpdatedBy *string `json:"UpdatedBy"`
	IsActive  *bool   `json:"IsActive"`
}

type ExamConfiguration struct {
	ID           *string `json:"id"`
	ExamID       *string `json:"ExamId"`
	Shuffle      *bool   `json:"Shuffle"`
	DisplayHints *bool   `json:"DisplayHints"`
	ShowAnswer   *bool   `json:"ShowAnswer"`
	ShowResult   *bool   `json:"ShowResult"`
	CreatedBy    *string `json:"CreatedBy"`
	UpdatedBy    *string `json:"UpdatedBy"`
	IsActive     *bool   `json:"IsActive"`
	CreatedAt    *string `json:"CreatedAt"`
	UpdatedAt    *string `json:"UpdatedAt"`
}

type ExamInstruction struct {
	ID              *string `json:"id"`
	ExamID          *string `json:"ExamId"`
	Instructions    *string `json:"Instructions"`
	PassingCriteria *string `json:"PassingCriteria"`
	NoAttempts      *string `json:"NoAttempts"`
	AccessType      *string `json:"AccessType"`
	CreatedAt       *string `json:"CreatedAt"`
	UpdatedAt       *string `json:"UpdatedAt"`
	CreatedBy       *string `json:"CreatedBy"`
	UpdatedBy       *string `json:"UpdatedBy"`
	IsActive        *bool   `json:"IsActive"`
}

type ExamSchedule struct {
	ID         *string `json:"id"`
	ExamID     *string `json:"ExamId"`
	Start      *string `json:"Start"`
	End        *string `json:"End"`
	BufferTime *string `json:"BufferTime"`
	CreatedAt  *string `json:"CreatedAt"`
	UpdatedAt  *string `json:"UpdatedAt"`
	CreatedBy  *string `json:"CreatedBy"`
	UpdatedBy  *string `json:"UpdatedBy"`
	IsActive   *bool   `json:"IsActive"`
}

type MapQuestionWithOption struct {
	QuestionID *string           `json:"question_id"`
	Options    []*QuestionOption `json:"options"`
}

type Module struct {
	ID          *string `json:"id"`
	Name        *string `json:"name"`
	IsChapter   *bool   `json:"isChapter"`
	Description *string `json:"description"`
	CourseID    *string `json:"courseId"`
	Owner       *string `json:"owner"`
	Duration    *int    `json:"duration"`
	CreatedAt   *string `json:"created_at"`
	UpdatedAt   *string `json:"updated_at"`
	Level       *string `json:"level"`
	Sequence    *int    `json:"sequence"`
	SetGlobal   *bool   `json:"setGlobal"`
}

type PaginatedCourse struct {
	Courses    []*Course `json:"courses"`
	PageCursor *string   `json:"pageCursor"`
	Direction  *string   `json:"direction"`
	PageSize   *int      `json:"pageSize"`
}

type PaginatedExams struct {
	Exams      []*Exam `json:"exams"`
	PageCursor *string `json:"pageCursor"`
	Direction  *string `json:"direction"`
	PageSize   *int    `json:"pageSize"`
}

type PaginatedQuestionBank struct {
	QuestionBanks []*QuestionBank `json:"questionBanks"`
	PageCursor    *string         `json:"pageCursor"`
	Direction     *string         `json:"direction"`
	PageSize      *int            `json:"pageSize"`
}

type PaginatedQuestionPapers struct {
	QuestionPapers []*QuestionPaper `json:"questionPapers"`
	PageCursor     *string          `json:"pageCursor"`
	Direction      *string          `json:"direction"`
	PageSize       *int             `json:"pageSize"`
}

type QBFilters struct {
	DifficultyStart     *int      `json:"DifficultyStart"`
	DifficultyEnd       *int      `json:"DifficultyEnd"`
	TotalQuestions      *int      `json:"TotalQuestions"`
	ExcludedQuestionIds []*string `json:"ExcludedQuestionIds"`
}

type QuestionBank struct {
	ID          *string `json:"id"`
	Name        *string `json:"name"`
	LspID       *string `json:"lspId"`
	Description *string `json:"description"`
	Category    *string `json:"category"`
	SubCategory *string `json:"sub_category"`
	CreatedAt   *string `json:"created_at"`
	UpdatedAt   *string `json:"updated_at"`
	CreatedBy   *string `json:"created_by"`
	UpdatedBy   *string `json:"updated_by"`
	IsActive    *bool   `json:"is_active"`
	IsDefault   *bool   `json:"is_default"`
	Owner       *string `json:"owner"`
}

type QuestionBankQuestion struct {
	ID             *string `json:"id"`
	Name           *string `json:"Name"`
	Description    *string `json:"Description"`
	Type           *string `json:"Type"`
	Difficulty     *int    `json:"Difficulty"`
	Attachment     *string `json:"Attachment"`
	AttachmentType *string `json:"AttachmentType"`
	Hint           *string `json:"Hint"`
	QbmID          *string `json:"QbmId"`
	Status         *string `json:"Status"`
	CreatedAt      *string `json:"CreatedAt"`
	UpdatedAt      *string `json:"UpdatedAt"`
	CreatedBy      *string `json:"CreatedBy"`
	UpdatedBy      *string `json:"UpdatedBy"`
}

type QuestionOption struct {
	ID             *string `json:"id"`
	QmID           *string `json:"QmId"`
	Description    *string `json:"Description"`
	IsCorrect      *bool   `json:"IsCorrect"`
	CreatedAt      *string `json:"CreatedAt"`
	UpdatedAt      *string `json:"UpdatedAt"`
	CreatedBy      *string `json:"CreatedBy"`
	UpdatedBy      *string `json:"UpdatedBy"`
	AttachmentType *string `json:"AttachmentType"`
	Attachment     *string `json:"Attachment"`
	IsActive       *bool   `json:"IsActive"`
}

type QuestionPaper struct {
	ID                *string `json:"id"`
	Name              *string `json:"name"`
	Category          *string `json:"Category"`
	SubCategory       *string `json:"SubCategory"`
	CreatedAt         *string `json:"CreatedAt"`
	UpdatedAt         *string `json:"UpdatedAt"`
	CreatedBy         *string `json:"CreatedBy"`
	UpdatedBy         *string `json:"UpdatedBy"`
	IsActive          *bool   `json:"IsActive"`
	DifficultyLevel   *string `json:"DifficultyLevel"`
	SectionWise       *bool   `json:"SectionWise"`
	Description       *string `json:"Description"`
	SuggestedDuration *string `json:"SuggestedDuration"`
	Status            *string `json:"Status"`
}

type QuestionPaperSection struct {
	ID              *string `json:"id"`
	QpID            *string `json:"QpId"`
	Name            *string `json:"Name"`
	Description     *string `json:"Description"`
	CreatedAt       *string `json:"CreatedAt"`
	UpdatedAt       *string `json:"UpdatedAt"`
	CreatedBy       *string `json:"CreatedBy"`
	UpdatedBy       *string `json:"UpdatedBy"`
	IsActive        *bool   `json:"IsActive"`
	Type            *string `json:"Type"`
	DifficultyLevel *string `json:"DifficultyLevel"`
	TotalQuestions  *int    `json:"TotalQuestions"`
}

type Quiz struct {
	ID          *string `json:"id"`
	Name        *string `json:"name"`
	Category    *string `json:"category"`
	Type        *string `json:"type"`
	IsMandatory *bool   `json:"isMandatory"`
	CreatedAt   *string `json:"created_at"`
	UpdatedAt   *string `json:"updated_at"`
	TopicID     *string `json:"topicId"`
	CourseID    *string `json:"courseId"`
	QuestionID  *string `json:"questionId"`
	QbID        *string `json:"qbId"`
	Weightage   *int    `json:"weightage"`
	Sequence    *int    `json:"sequence"`
	StartTime   *int    `json:"startTime"`
}

type QuizDescriptive struct {
	QuizID        *string `json:"quizId"`
	Question      *string `json:"question"`
	CorrectAnswer *string `json:"correctAnswer"`
	Explanation   *string `json:"explanation"`
}

type QuizFile struct {
	QuizID  *string `json:"quizId"`
	Type    *string `json:"type"`
	Name    *string `json:"name"`
	FileURL *string `json:"fileUrl"`
}

type QuizMcq struct {
	QuizID        *string   `json:"quizId"`
	Question      *string   `json:"question"`
	Options       []*string `json:"options"`
	CorrectOption *string   `json:"correctOption"`
	Explanation   *string   `json:"explanation"`
}

type SectionFixedQuestions struct {
	ID         *string `json:"id"`
	SqbID      *string `json:"SqbId"`
	QuestionID *string `json:"QuestionId"`
	CreatedAt  *string `json:"CreatedAt"`
	UpdatedAt  *string `json:"UpdatedAt"`
	CreatedBy  *string `json:"CreatedBy"`
	UpdatedBy  *string `json:"UpdatedBy"`
	IsActive   *bool   `json:"IsActive"`
}

type SectionQBMapping struct {
	ID              *string `json:"id"`
	QbID            *string `json:"QbId"`
	SectionID       *string `json:"SectionId"`
	DifficultyLevel *string `json:"DifficultyLevel"`
	TotalQuestions  *int    `json:"TotalQuestions"`
	QuestionMarks   *string `json:"QuestionMarks"`
	QuestionType    *string `json:"QuestionType"`
	RetrieveType    *string `json:"RetrieveType"`
	CreatedAt       *string `json:"CreatedAt"`
	UpdatedAt       *string `json:"UpdatedAt"`
	CreatedBy       *string `json:"CreatedBy"`
	UpdatedBy       *string `json:"UpdatedBy"`
	IsActive        *bool   `json:"IsActive"`
}

type SubCatMain struct {
	ID          *string `json:"id"`
	Name        *string `json:"Name"`
	Description *string `json:"Description"`
	ImageURL    *string `json:"ImageUrl"`
	Code        *string `json:"Code"`
	CatID       *string `json:"CatId"`
	CreatedAt   *string `json:"CreatedAt"`
	UpdatedAt   *string `json:"UpdatedAt"`
	CreatedBy   *string `json:"CreatedBy"`
	UpdatedBy   *string `json:"UpdatedBy"`
	IsActive    *bool   `json:"IsActive"`
}

type SubtitleURL struct {
	URL      *string `json:"url"`
	Language *string `json:"language"`
}

type Topic struct {
	ID          *string `json:"id"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
	Type        *string `json:"type"`
	ModuleID    *string `json:"moduleId"`
	ChapterID   *string `json:"chapterId"`
	CourseID    *string `json:"courseId"`
	CreatedAt   *string `json:"created_at"`
	UpdatedAt   *string `json:"updated_at"`
	Sequence    *int    `json:"sequence"`
	CreatedBy   *string `json:"created_by"`
	UpdatedBy   *string `json:"updated_by"`
	Image       *string `json:"image"`
}

type TopicContent struct {
	ID                *string        `json:"id"`
	Language          *string        `json:"language"`
	TopicID           *string        `json:"topicId"`
	CourseID          *string        `json:"courseId"`
	StartTime         *int           `json:"startTime"`
	Duration          *int           `json:"duration"`
	SkipIntroDuration *int           `json:"skipIntroDuration"`
	NextShowTime      *int           `json:"nextShowTime"`
	FromEndTime       *int           `json:"fromEndTime"`
	CreatedAt         *string        `json:"created_at"`
	UpdatedAt         *string        `json:"updated_at"`
	Type              *string        `json:"type"`
	ContentURL        *string        `json:"contentUrl"`
	SubtitleURL       []*SubtitleURL `json:"subtitleUrl"`
	IsDefault         *bool          `json:"is_default"`
}

type TopicExam struct {
	ID        *string `json:"id"`
	TopicID   *string `json:"topicId"`
	ExamID    *string `json:"examId"`
	CourseID  *string `json:"courseId"`
	CreatedAt *string `json:"created_at"`
	UpdatedAt *string `json:"updated_at"`
	Language  *string `json:"language"`
}

type TopicResource struct {
	ID        *string `json:"id"`
	Name      *string `json:"name"`
	Type      *string `json:"type"`
	TopicID   *string `json:"topicId"`
	CourseID  *string `json:"courseId"`
	CreatedAt *string `json:"created_at"`
	UpdatedAt *string `json:"updated_at"`
	CreatedBy *string `json:"created_by"`
	UpdatedBy *string `json:"updated_by"`
	URL       *string `json:"url"`
}

type SubCategories struct {
	Name *string `json:"name"`
	Rank *int    `json:"rank"`
}

type Status string

const (
	StatusSaved           Status = "SAVED"
	StatusApprovalPending Status = "APPROVAL_PENDING"
	StatusOnHold          Status = "ON_HOLD"
	StatusApproved        Status = "APPROVED"
	StatusPublished       Status = "PUBLISHED"
	StatusRejected        Status = "REJECTED"
)

var AllStatus = []Status{
	StatusSaved,
	StatusApprovalPending,
	StatusOnHold,
	StatusApproved,
	StatusPublished,
	StatusRejected,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusSaved, StatusApprovalPending, StatusOnHold, StatusApproved, StatusPublished, StatusRejected:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
