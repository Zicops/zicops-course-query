// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Course struct {
	ID                 *string          `json:"id"`
	Name               *string          `json:"name"`
	Description        *string          `json:"description"`
	Summary            *string          `json:"summary"`
	Instructor         *string          `json:"instructor"`
	Image              *string          `json:"image"`
	PreviewVideo       *string          `json:"previewVideo"`
	TileImage          *string          `json:"tileImage"`
	Owner              *string          `json:"owner"`
	Duration           *int             `json:"duration"`
	ExpertiseLevel     *string          `json:"expertise_level"`
	Language           []*string        `json:"language"`
	Benefits           []*string        `json:"benefits"`
	Outcomes           []*string        `json:"outcomes"`
	CreatedAt          *string          `json:"created_at"`
	UpdatedAt          *string          `json:"updated_at"`
	Type               *string          `json:"type"`
	Prequisites        []*string        `json:"prequisites"`
	GoodFor            []*string        `json:"goodFor"`
	MustFor            []*string        `json:"mustFor"`
	RelatedSkills      []*string        `json:"related_skills"`
	PublishDate        *string          `json:"publish_date"`
	ExpiryDate         *string          `json:"expiry_date"`
	ExpectedCompletion *string          `json:"expected_completion"`
	QaRequired         *bool            `json:"qa_required"`
	Approvers          []*string        `json:"approvers"`
	CreatedBy          *string          `json:"created_by"`
	UpdatedBy          *string          `json:"updated_by"`
	Status             *Status          `json:"status"`
	IsDisplay          *bool            `json:"is_display"`
	Category           *string          `json:"category"`
	SubCategory        *string          `json:"sub_category"`
	SubCategories      []*SubCategories `json:"sub_categories"`
}

type PaginatedCourse struct {
	Courses    []*Course `json:"courses"`
	PageCursor *string   `json:"pageCursor"`
	Direction  *string   `json:"direction"`
	PageSize   *int      `json:"pageSize"`
}

type SubCategories struct {
	Name *string `json:"name"`
	Rank *int    `json:"rank"`
}

type Status string

const (
	StatusSaved           Status = "SAVED"
	StatusApprovalPending Status = "APPROVAL_PENDING"
	StatusOnHold          Status = "ON_HOLD"
	StatusApproved        Status = "APPROVED"
	StatusPublished       Status = "PUBLISHED"
	StatusRejected        Status = "REJECTED"
)

var AllStatus = []Status{
	StatusSaved,
	StatusApprovalPending,
	StatusOnHold,
	StatusApproved,
	StatusPublished,
	StatusRejected,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusSaved, StatusApprovalPending, StatusOnHold, StatusApproved, StatusPublished, StatusRejected:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
