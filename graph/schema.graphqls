# Queries for coursez
enum Status {
    SAVED
    APPROVAL_PENDING
    ON_HOLD
    APPROVED
    PUBLISHED
    REJECTED
}

type sub_categories {
    name: String
    rank: Int
}

# define course type
type Course{
    id: ID
    name: String
    description: String
    summary: String
    instructor: String
    image: String
    previewVideo: String
    tileImage: String
    owner: String
    duration: Int
    expertise_level: String
    language: [String]
    benefits: [String]
    outcomes: [String]
    created_at: String
    updated_at: String
    type: String
    prequisites: [String]
    goodFor: [String]
    mustFor: [String]
    related_skills: [String]
    publish_date: String
    expiry_date: String
    expected_completion: String
    qa_required: Boolean
    approvers: [String]
    created_by: String
    updated_by: String
    status: Status
    is_display: Boolean
    category: String
    sub_category: String
    sub_categories: [sub_categories]
    is_active: Boolean
}

type PaginatedCourse {
    courses: [Course]
    pageCursor: String
    direction: String
    pageSize: Int
}

type Module{
    id: ID
    name: String
    isChapter: Boolean
    description: String
    courseId: String
    owner: String
    duration: Int
    created_at: String
    updated_at: String
    level : String
    sequence: Int
    setGlobal: Boolean
}

type Chapter {
    id: ID
    name: String
    description: String
    moduleId: String
    courseId: String
    created_at: String
    updated_at: String
    sequence: Int
}

type Topic {
    id: ID
    name: String
    description: String
    type : String
    moduleId: String
    chapterId: String
    courseId: String
    created_at: String
    updated_at: String
    sequence: Int
    created_by: String
    updated_by: String
    image: String
}

type SubtitleUrl {
    url : String
    language : String
}

type TopicContent {
    id: ID
    language: String
    topicId: String
    courseId: String
    startTime: Int
    duration: Int
    skipIntroDuration: Int
    nextShowTime: Int
    fromEndTime: Int
    created_at: String
    updated_at: String
    type: String
    contentUrl: String
    subtitleUrl: [SubtitleUrl]
    is_default: Boolean
}

type QuizFile {
    quizId: String
    type: String
    name: String
    fileUrl: String
}

type QuizMcq {
    quizId: String
    question: String
    options: [String]
    correctOption: String
    explanation: String
}

type QuizDescriptive {
    quizId: String
    question: String
    correctAnswer: String
    explanation: String
}

type TopicResource{
    id: ID
    name: String
    type: String
    topicId: String
    courseId: String
    created_at: String
    updated_at: String
    created_by: String
    updated_by: String
    url: String
}

type Quiz {
    id: ID
    name: String
    category: String
    type: String
    isMandatory: Boolean
    created_at: String
    updated_at: String
    topicId: String
    sequence: Int
    startTime: Int
}

type QuestionBank {
    id: ID
    name: String
    description: String
    category: String
    sub_category: String
    created_at: String
    updated_at: String
    created_by: String
    updated_by: String
    is_active: Boolean
    is_default: Boolean
    owner: String
}

type PaginatedQuestionBank{
    questionBanks: [QuestionBank]
    pageCursor: String
    direction: String
    pageSize: Int
}

type QuestionBankQuestion {
    id: ID
    Name: String
    Description: String
    Type: String
    Difficulty: Int
    Attachment: String
    AttachmentType: String
    Hint : String
    QbmId: String
    Status: String
    CreatedAt: String
    UpdatedAt: String
    CreatedBy: String
    UpdatedBy: String
}

type QuestionOption {
    id: ID
    QmId: String
    Description: String
    IsCorrect: Boolean
    CreatedAt: String
    UpdatedAt: String
    CreatedBy: String
    UpdatedBy: String
    AttachmentType: String
    Attachment: String
    IsActive : Boolean
}

type QuestionPaper {
    id: ID
    name: String
    Category: String
    SubCategory: String
    CreatedAt: String
    UpdatedAt: String
    CreatedBy: String
    UpdatedBy: String
    IsActive : Boolean
    DifficultyLevel: String
    SectionWise: Boolean
    Description: String
    SuggestedDuration: String
    Status: String
}

type PaginatedQuestionPapers{
    questionPapers: [QuestionPaper]
    pageCursor: String
    direction: String
    pageSize: Int
}

type QuestionPaperSection {
    id: ID
    QpId: String
    Name: String
    Description: String
    CreatedAt: String
    UpdatedAt: String
    CreatedBy: String
    UpdatedBy: String
    IsActive : Boolean
    Type: String
    DifficultyLevel: String
    TotalQuestions: Int
}

type SectionQBMapping {
    id: ID
    QbId: String
    SectionId: String
    DifficultyLevel: String
    TotalQuestions: Int
    QuestionMarks: String
    QuestionType: String
    RetrieveType: String
    CreatedAt: String
    UpdatedAt: String
    CreatedBy: String
    UpdatedBy: String
    IsActive : Boolean
}

type SectionFixedQuestions {
    id: ID
    SqbId: String
    QuestionId: String
    CreatedAt: String
    UpdatedAt: String
    CreatedBy: String
    UpdatedBy: String
    IsActive : Boolean
}

type MapQuestionWithOption{
    question_id: String
    options:[QuestionOption]
}

type Exam {
    id: ID
    Name: String
    Description: String
    Code : String
    QpId: String
    CreatedAt: String
    UpdatedAt: String
    CreatedBy: String
    UpdatedBy: String
    IsActive : Boolean
    Type: String
    ScheduleType: String
    Duration: Int
    Status: String
    Category: String
    SubCategory: String
}

type PaginatedExams{
    exams: [Exam]
    pageCursor: String
    direction: String
    pageSize: Int
}

type ExamSchedule {
    id: ID
    ExamId: String
    Start: String
    End: String
    BufferTime: String
    CreatedAt: String
    UpdatedAt: String
    CreatedBy: String
    UpdatedBy: String
    IsActive : Boolean
}

type ExamInstruction {
    id: ID
    ExamId: String
    Instructions: String
    PassingCriteria: String
    NoAttempts: String
    AccessType: String
    CreatedAt: String
    UpdatedAt: String
    CreatedBy: String
    UpdatedBy: String
    IsActive : Boolean
}

type ExamCohort {
    id: ID
    ExamId: String
    CohortId: String
    CreatedAt: String
    UpdatedAt: String
    CreatedBy: String
    UpdatedBy: String
    IsActive : Boolean
}

type ExamConfiguration {
    id: ID
    ExamId: String
    Shuffle: Boolean
    DisplayHints: Boolean
    ShowAnswer: Boolean
    ShowResult: Boolean
    CreatedBy: String
    UpdatedBy: String
    IsActive : Boolean
    CreatedAt: String
    UpdatedAt: String
}

type TopicExam{
    id: ID
    topicId: String
    examId: String
    courseId: String
    created_at: String
    updated_at: String
    language: String
}

type Query{
  allCategories: [String]
  allSubCategories: [String]
  latestCourses(publish_time: Int, pageCursor: String, Direction: String, pageSize:Int, status:Status): PaginatedCourse
  getCourse(course_id: String): Course
  getCourseModules(course_id: String): [Module]
  getModuleById(module_id: String): Module
  getCourseChapters(course_id: String): [Chapter]
  getChapterById(chapter_id: String): Chapter
  getTopics(course_id: String): [Topic]
  getTopicById(topic_id: String): Topic
  getTopicContent(topic_id: String): [TopicContent]
  getTopicExams(topic_id: String): [TopicExam]
  getTopicResources(topic_id: String): [TopicResource]
  getTopicQuizes(topic_id: String): [Quiz]
  getQuizFiles(quiz_id: String): [QuizFile]
  getMCQQuiz(quiz_id: String): [QuizMcq]
  getDescriptiveQuiz(quiz_id: String): [QuizDescriptive]
  getTopicContentByCourseId(course_id: String): [TopicContent]
  getTopicExamsByCourseId(course_id: String): [TopicExam]
  getResourcesByCourseId(course_id: String): [TopicResource]
  getLatestQuestionBank(publish_time: Int, pageCursor: String, Direction: String, pageSize:Int): PaginatedQuestionBank
  getQBMeta(qb_ids:[String]): [QuestionBank]
  getQuestionBankQuestions(question_bank_id: String): [QuestionBankQuestion]
  getLatestQuestionPapers(publish_time: Int, pageCursor: String, Direction: String, pageSize:Int): PaginatedQuestionPapers
  getQPMeta(question_papers_ids:[String]): [QuestionPaper]
  getLatestExams(publish_time: Int, pageCursor: String, Direction: String, pageSize:Int): PaginatedExams
  getQuestionPaperSections(question_paper_id: String): [QuestionPaperSection]
  getQPBankMappingByQBId(question_bank_id: String): [SectionQBMapping]
  getQPBankMappingBySectionId(section_id: String): [SectionQBMapping]
  getSectionFixedQuestions(section_id: String): [SectionFixedQuestions]
  getOptionsForQuestions(question_ids: [String]): [MapQuestionWithOption]
  getExamsMeta(exam_ids:[String]): [Exam]
  getExamsByQPId(question_paper_id: String): [Exam]
  getExamSchedule(exam_id: String): [ExamSchedule]
  getExamInstruction(exam_id: String): [ExamInstruction]
  getExamCohort(exam_id: String): [ExamCohort]
  getExamConfiguration(exam_id: String): [ExamConfiguration]
}
